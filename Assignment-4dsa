ASSIGNMENT 4
Question 1: Balanced Binary Search Tree (BST)
Solution code:
#include <iostream>

using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    int height;

    Node(int val) : data(val), left(nullptr), right(nullptr), height(1) {}
};

class AVLTree {
private:
    Node* root;

    int height(Node* node) { return node ? node->height : 0; }

    int balanceFactor(Node* node) { return height(node->left) - height(node->right); }

    Node* rotateRight(Node* y) {
        Node* x = y->left, * T = x->right;
        x->right = y, y->left = T;
        y->height = 1 + max(height(y->left), height(y->right));
        x->height = 1 + max(height(x->left), height(x->right));
        return x;
    }

    Node* rotateLeft(Node* x) {
        Node* y = x->right, * T = y->left;
        y->left = x, x->right = T;
        x->height = 1 + max(height(x->left), height(x->right));
        y->height = 1 + max(height(y->left), height(y->right));
        return y;
    }

    Node* insert(Node* node, int data) {
        if (!node) return new Node(data);
        if (data < node->data) node->left = insert(node->left, data);
        else if (data > node->data) node->right = insert(node->right, data);
        else return node;
        node->height = 1 + max(height(node->left), height(node->right));
        int balance = balanceFactor(node);
        if (balance > 1 && data < node->left->data) return rotateRight(node);
        if (balance < -1 && data > node->right->data) return rotateLeft(node);
        if (balance > 1 && data > node->left->data) { node->left = rotateLeft(node->left); return rotateRight(node); }
        if (balance < -1 && data < node->right->data) { node->right = rotateRight(node->right); return rotateLeft(node); }
        return node;
    }

    Node* minValueNode(Node* node) {
        while (node && node->left) node = node->left;
        return node;
    }

    Node* deleteNode(Node* root, int data) {
        if (!root) return root;
        if (data < root->data) root->left = deleteNode(root->left, data);
        else if (data > root->data) root->right = deleteNode(root->right, data);
        else {
            if (!root->left || !root->right) {
                Node* temp = root->left ? root->left : root->right;
                if (!temp) { temp = root; root = nullptr; } 
                else *root = *temp;
                delete temp;
            } else {
                Node* temp = minValueNode(root->right);
                root->data = temp->data;
                root->right = deleteNode(root->right, temp->data);
            }
        }
        if (!root) return root;
        root->height = 1 + max(height(root->left), height(root->right));
        int balance = balanceFactor(root);
        if (balance > 1 && balanceFactor(root->left) >= 0) return rotateRight(root);
        if (balance > 1 && balanceFactor(root->left) < 0) { root->left = rotateLeft(root->left); return rotateRight(root); }
        if (balance < -1 && balanceFactor(root->right) <= 0) return rotateLeft(root);
        if (balance < -1 && balanceFactor(root->right) > 0) { root->right = rotateRight(root->right); return rotateLeft(root); }
        return root;
    }

    void traverseInOrder(Node* node) {
        if (node) { traverseInOrder(node->left); cout << node->data << " "; traverseInOrder(node->right); }
    }

public:
    AVLTree() : root(nullptr) {}

    void insert(int data) { root = insert(root, data); }

    void remove(int data) { root = deleteNode(root, data); }

    void displayInOrder() { traverseInOrder(root); cout << endl; }
};

int main() {
    AVLTree avlTree;
    avlTree.insert(10); avlTree.insert(20); avlTree.insert(30);
    avlTree.displayInOrder(); // Output: 10 20 30
    avlTree.remove(20);
    avlTree.displayInOrder(); // Output: 10 30
    return 0;
}


